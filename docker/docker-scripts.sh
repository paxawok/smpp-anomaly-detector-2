#!/bin/bash
# docker-scripts.sh - –°–∫—Ä–∏–ø—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
show_help() {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./docker-scripts.sh [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–û–ú–ê–ù–î–ò:"
    echo "  build       - –ü–æ–±—É–¥—É–≤–∞—Ç–∏ Docker –æ–±—Ä–∞–∑"
    echo "  start       - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ dashboard"
    echo "  stop        - –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏"
    echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ dashboard"
    echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ dashboard"
    echo ""
    echo "PIPELINE (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö):"
    echo "  pipeline    - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π pipeline (1‚Üí2‚Üí3‚Üí4)"
    echo "  generate    - 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SMPP PDU"
    echo "  parse       - 2. –ü–∞—Ä—Å–∏–Ω–≥ PDU –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    echo "  extract     - 3. –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –æ–∑–Ω–∞–∫"
    echo "  detect      - 4. –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π"
    echo ""
    echo "–£–¢–ò–õ–Ü–¢–ò:"
    echo "  shell       - –í—ñ–¥–∫—Ä–∏—Ç–∏ shell –≤ dashboard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"
    echo "  clean       - –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–∞ –æ–±—Ä–∞–∑–∏"
    echo "  status      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "  quick       - –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç (build + start)"
    echo "  full        - –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (pipeline + dashboard)"
    echo "  help        - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        exit 1
    fi
}

# –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –æ–±—Ä–∞–∑
build() {
    echo "üî® –ü–æ–±—É–¥–æ–≤–∞ Docker –æ–±—Ä–∞–∑—É..."
    docker-compose build --no-cache
    echo "‚úÖ –û–±—Ä–∞–∑ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ!"
}

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å (dashboard)
start() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ SMPP Dashboard..."
    docker-compose up -d dashboard
    echo "‚úÖ Dashboard –∑–∞–ø—É—â–µ–Ω–æ!"
    echo "üìä Dashboard –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞: http://localhost:8501"
}

# –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏
stop() {
    echo "üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker-compose down
    echo "‚úÖ –°–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ!"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ dashboard..."
    stop
    sleep 2
    start
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏
logs() {
    echo "üìù –õ–æ–≥–∏ dashboard:"
    docker-compose logs -f dashboard
}

# –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ pipeline –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö
pipeline() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ SMPP pipeline..."
    
    echo "1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SMPP PDU..."
    docker-compose --profile pipeline up data-generator
    
    echo "2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ PDU –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
    docker-compose --profile pipeline up pdu-parser
    
    echo "3Ô∏è‚É£ –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –æ–∑–Ω–∞–∫..."
    docker-compose --profile pipeline up feature-extractor
    
    echo "4Ô∏è‚É£ –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π..."
    docker-compose --profile pipeline up anomaly-detector
    
    echo "‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ."
}

# –û–∫—Ä–µ–º—ñ –µ—Ç–∞–ø–∏ pipeline
generate() {
    echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SMPP PDU..."
    docker-compose --profile pipeline up data-generator
    echo "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

parse() {
    echo "üîç –ü–∞—Ä—Å–∏–Ω–≥ PDU..."
    docker-compose --profile pipeline up pdu-parser
    echo "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π!"
}

extract() {
    echo "üîß –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –æ–∑–Ω–∞–∫..."
    docker-compose --profile pipeline up feature-extractor
    echo "‚úÖ –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

detect() {
    echo "üéØ –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π..."
    docker-compose --profile pipeline up anomaly-detector
    echo "‚úÖ –í–∏—è–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# Shell –≤ dashboard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
shell() {
    echo "üêö –í—ñ–¥–∫—Ä–∏—Ç—Ç—è shell –≤ dashboard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ..."
    docker-compose exec dashboard /bin/bash
}

# –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ
clean() {
    echo "üßπ –û—á–∏—â–µ–Ω–Ω—è Docker —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    docker-compose down --rmi all --volumes --remove-orphans
    docker system prune -f
    echo "‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å
status() {
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose ps
    echo ""
    echo "üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤:"
    docker stats --no-stream
}

# –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç (—Ç—ñ–ª—å–∫–∏ dashboard)
quick_start() {
    echo "‚ö° –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç dashboard..."
    build
    start
    echo "üìä Dashboard: http://localhost:8501"
}

# –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (pipeline + dashboard)
full() {
    echo "üîÑ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: pipeline + dashboard..."
    pipeline
    echo "5Ô∏è‚É£ –ó–∞–ø—É—Å–∫ dashboard..."
    start
    echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!"
    echo "üìä Dashboard: http://localhost:8501"
}

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
case "$1" in
    "build")
        check_docker
        build
        ;;
    "start")
        check_docker
        start
        ;;
    "stop")
        check_docker
        stop
        ;;
    "restart")
        check_docker
        restart
        ;;
    "logs")
        check_docker
        logs
        ;;
    "generate")
        check_docker
        generate
        ;;
    "parse")
        check_docker
        parse
        ;;
    "extract")
        check_docker
        extract
        ;;
    "detect")
        check_docker
        detect
        ;;
    "pipeline")
        check_docker
        pipeline
        ;;
    "shell")
        check_docker
        shell
        ;;
    "clean")
        check_docker
        clean
        ;;
    "status")
        check_docker
        status
        ;;
    "full")
        check_docker
        full
        ;;
    "quick")
        check_docker
        quick_start
        ;;
    "help"|*)
        show_help
        ;;
esac