import pandas as pd
import numpy as np
import joblib
import pickle
import re
from datetime import datetime
from sklearn.metrics import classification_report, f1_score

# üß† –Ü–º–ø–æ—Ä—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ñ–≤ (—â–æ–± deserialization —Å–ø—Ä–∞—Ü—é–≤–∞–≤)
from src.detection.classification.classification import TextSelector, TextFeatureExtractor, SourceFeatureExtractor, TimeFeatureExtractor

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
with open('models/sms_classifier_20250607_0605.pkl', 'rb') as f:
    model_bundle = pickle.load(f)

pipeline = model_bundle['best_model']  # <-- –≥–æ–ª–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å
# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–µ—à –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ: model_bundle['label_encoder'], model_bundle['training_time'], —Ç–æ—â–æ

# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
df = pd.read_csv('data/datasets/smpp_weekly_dataset_20250607_033017.csv', encoding='utf-16')
df = df[df['is_anomaly'] == False].copy()

# 3. –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (—Ç–∞–∫–∞ –∂, —è–∫ –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ)
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'\d+', '', text)
    text = re.sub(r'\W+', ' ', text)
    return text.strip()

df['processed_text'] = df['message_text'].apply(preprocess_text)

predicted = pipeline.predict(df)

# –ü–æ–¥–∏–≤–∏—Å—è, —â–æ —Å–∞–º–µ –ø–æ–≤–µ—Ä—Ç–∞—î –º–æ–¥–µ–ª—å
print(predicted[:10])  # –ß–∏—Å–ª–∞ —á–∏ —Ä—è–¥–∫–∏?

# –Ø–∫—â–æ —á–∏—Å–ª–∞ ‚Äî –¥–µ–∫–æ–¥—É–π
if isinstance(predicted[0], (int, float, np.integer)):
    label_encoder = model_bundle['label_encoder']
    predicted_labels = label_encoder.inverse_transform(predicted)
else:
    predicted_labels = predicted


# 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
df['predicted_category'] = predicted_labels
df.to_csv('tests/predicted_sms.csv', index=False, encoding='utf-8-sig')
print("–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É 'tests/predicted_sms.csv'")
